&ACCESS RVP
&REL 5
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF RSI_CircleCorr( ) 
; =============================================
; 
; RSI EXAMPLE: Lissajous circle
; Create a cirle movement with two sine corrections
; 
; =============================================
       
; Declaration of KRL variables
DECL INT ret	; Return value for RSI commands
DECL INT CONTID	; ContainerID
DECL REAL fVar ; Read the amplitude

;FOLD INI
  ;FOLD BASISTECH INI
    ;GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    ;INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

; Move to start position
PTP {A1 0, A2 -90, A3 90, A4 0, A5 90, A6 0}
 
; Base in actual position
$BASE.X=$POS_ACT.X
$BASE.Y=$POS_ACT.Y
$BASE.Z=$POS_ACT.z

; Create RSI Context
ret=RSI_CREATE("RSI_CircleCorr.rsi",CONTID)
IF (ret <> RSIOK) THEN
  HALT
ENDIF

; Start RSI execution
ret=RSI_ON(#ABSOLUTE)
IF (ret <> RSIOK) THEN
  HALT
ENDIF

; Sensor guided movement
RSI_MOVECORR()

; Turn off RSI
ret=RSI_OFF()
IF (ret <> RSIOK) THEN
  HALT
ENDIF

; Modify RSI parameter
ret=RSI_GETPUBLICPAR(CONTID,"SOURCE1","Amplitude", fVar)
IF (ret <> RSIOK) THEN
  HALT
ENDIF
ret=RSI_SETPUBLICPAR(CONTID,"SOURCE1","Amplitude", fVar/2)
IF (ret <> RSIOK) THEN
  HALT
ENDIF

; Start RSI execution
ret=RSI_ON(#ABSOLUTE)
IF (ret <> RSIOK) THEN
  HALT
ENDIF

; Sensor guided movement
RSI_MOVECORR()

; Turn off RSI
ret=RSI_OFF()
IF (ret <> RSIOK) THEN
  HALT
ENDIF

PTP {A1 0, A2 -90, A3 90, A4 0, A5 90, A6 0}

END